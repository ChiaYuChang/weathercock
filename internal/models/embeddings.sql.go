// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: embeddings.sql

package models

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const getAverageEmbeddingByArticleIDs = `-- name: GetAverageEmbeddingByArticleIDs :one
SELECT
    e.article_id,
    e.model_id,
    AVG(e.vector)::vector AS avg_vector
FROM
    embeddings AS e
WHERE
    e.article_id = ANY($1::integer[])
    AND e.model_id = $2::integer
    AND e.vector IS NOT NULL
    AND e.vector <> '[]'::vector
GROUP BY
    e.article_id
`

type GetAverageEmbeddingByArticleIDsParams struct {
	ArticleIds []int32 `db:"article_ids" json:"article_ids"`
	ModelID    int32   `db:"model_id" json:"model_id"`
}

type GetAverageEmbeddingByArticleIDsRow struct {
	ArticleID int32           `db:"article_id" json:"article_id"`
	ModelID   int32           `db:"model_id" json:"model_id"`
	AvgVector pgvector.Vector `db:"avg_vector" json:"avg_vector"`
}

func (q *Queries) GetAverageEmbeddingByArticleIDs(ctx context.Context, arg GetAverageEmbeddingByArticleIDsParams) (GetAverageEmbeddingByArticleIDsRow, error) {
	row := q.db.QueryRow(ctx, getAverageEmbeddingByArticleIDs, arg.ArticleIds, arg.ModelID)
	var i GetAverageEmbeddingByArticleIDsRow
	err := row.Scan(&i.ArticleID, &i.ModelID, &i.AvgVector)
	return i, err
}

const getKNNEmbeddingsByCosineSimilarity = `-- name: GetKNNEmbeddingsByCosineSimilarity :many
SELECT
    article_id,
    (vector <=> $1::vector)::float8 AS similarity  -- <=> is the cosine distance operator in pgvector
FROM
    embeddings
WHERE
    model_id = $2::integer
    AND vector IS NOT NULL
    AND vector <> '[]'::vector
ORDER BY
    vector <=> $1
LIMIT $3::integer
`

type GetKNNEmbeddingsByCosineSimilarityParams struct {
	Query   pgvector.Vector `db:"query" json:"query"`
	ModelID int32           `db:"model_id" json:"model_id"`
	K       int32           `db:"k" json:"k"`
}

type GetKNNEmbeddingsByCosineSimilarityRow struct {
	ArticleID  int32   `db:"article_id" json:"article_id"`
	Similarity float64 `db:"similarity" json:"similarity"`
}

func (q *Queries) GetKNNEmbeddingsByCosineSimilarity(ctx context.Context, arg GetKNNEmbeddingsByCosineSimilarityParams) ([]GetKNNEmbeddingsByCosineSimilarityRow, error) {
	rows, err := q.db.Query(ctx, getKNNEmbeddingsByCosineSimilarity, arg.Query, arg.ModelID, arg.K)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKNNEmbeddingsByCosineSimilarityRow
	for rows.Next() {
		var i GetKNNEmbeddingsByCosineSimilarityRow
		if err := rows.Scan(&i.ArticleID, &i.Similarity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKNNEmbeddingsByInnerProduct = `-- name: GetKNNEmbeddingsByInnerProduct :many
SELECT
    article_id,
    (vector <#> $1::vector)::float8 AS inner_product  -- <#> is the inner product operator in pgvector
FROM
    embeddings
WHERE
    model_id = $2::integer
    AND vector IS NOT NULL
    AND vector <> '[]'::vector
ORDER BY
    vector <#> $1
LIMIT $3::integer
`

type GetKNNEmbeddingsByInnerProductParams struct {
	Query   pgvector.Vector `db:"query" json:"query"`
	ModelID int32           `db:"model_id" json:"model_id"`
	K       int32           `db:"k" json:"k"`
}

type GetKNNEmbeddingsByInnerProductRow struct {
	ArticleID    int32   `db:"article_id" json:"article_id"`
	InnerProduct float64 `db:"inner_product" json:"inner_product"`
}

func (q *Queries) GetKNNEmbeddingsByInnerProduct(ctx context.Context, arg GetKNNEmbeddingsByInnerProductParams) ([]GetKNNEmbeddingsByInnerProductRow, error) {
	rows, err := q.db.Query(ctx, getKNNEmbeddingsByInnerProduct, arg.Query, arg.ModelID, arg.K)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKNNEmbeddingsByInnerProductRow
	for rows.Next() {
		var i GetKNNEmbeddingsByInnerProductRow
		if err := rows.Scan(&i.ArticleID, &i.InnerProduct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKNNEmbeddingsByL2Distance = `-- name: GetKNNEmbeddingsByL2Distance :many
SELECT
    article_id,
    (vector <-> $1::vector)::float8 AS distance -- <-> is the L2 distance operator in pgvector
FROM
    embeddings
WHERE
    model_id = $2::integer
    AND vector IS NOT NULL
    AND vector <> '[]'::vector
ORDER BY
    vector <-> $1
LIMIT $3::integer
`

type GetKNNEmbeddingsByL2DistanceParams struct {
	Query   pgvector.Vector `db:"query" json:"query"`
	ModelID int32           `db:"model_id" json:"model_id"`
	K       int32           `db:"k" json:"k"`
}

type GetKNNEmbeddingsByL2DistanceRow struct {
	ArticleID int32   `db:"article_id" json:"article_id"`
	Distance  float64 `db:"distance" json:"distance"`
}

func (q *Queries) GetKNNEmbeddingsByL2Distance(ctx context.Context, arg GetKNNEmbeddingsByL2DistanceParams) ([]GetKNNEmbeddingsByL2DistanceRow, error) {
	rows, err := q.db.Query(ctx, getKNNEmbeddingsByL2Distance, arg.Query, arg.ModelID, arg.K)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKNNEmbeddingsByL2DistanceRow
	for rows.Next() {
		var i GetKNNEmbeddingsByL2DistanceRow
		if err := rows.Scan(&i.ArticleID, &i.Distance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEmbedding = `-- name: InsertEmbedding :one
INSERT INTO embeddings (
    article_id,
    chunk_id,
    model_id,
    vector
) VALUES (
    $1,
    $2,
    $3,
    $4::vector
) RETURNING id
`

type InsertEmbeddingParams struct {
	ArticleID int32           `db:"article_id" json:"article_id"`
	ChunkID   int32           `db:"chunk_id" json:"chunk_id"`
	ModelID   int32           `db:"model_id" json:"model_id"`
	Vector    pgvector.Vector `db:"vector" json:"vector"`
}

func (q *Queries) InsertEmbedding(ctx context.Context, arg InsertEmbeddingParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertEmbedding,
		arg.ArticleID,
		arg.ChunkID,
		arg.ModelID,
		arg.Vector,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
