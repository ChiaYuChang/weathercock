// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: models.sql

package models

import (
	"context"
)

const deleteModelByID = `-- name: DeleteModelByID :exec
DELETE FROM models
WHERE id = $1::integer
RETURNING id
`

func (q *Queries) DeleteModelByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteModelByID, id)
	return err
}

const getModelByID = `-- name: GetModelByID :one
SELECT id, name
FROM models
WHERE id = $1::integer
LIMIT 1
`

type GetModelByIDRow struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetModelByID(ctx context.Context, id int32) (GetModelByIDRow, error) {
	row := q.db.QueryRow(ctx, getModelByID, id)
	var i GetModelByIDRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getModelByName = `-- name: GetModelByName :one
SELECT id, name
FROM models
WHERE name = $1::text
LIMIT 1
`

type GetModelByNameRow struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) GetModelByName(ctx context.Context, name string) (GetModelByNameRow, error) {
	row := q.db.QueryRow(ctx, getModelByName, name)
	var i GetModelByNameRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertModel = `-- name: InsertModel :one
INSERT INTO models (name)
VALUES ($1::text)
RETURNING id
`

func (q *Queries) InsertModel(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, insertModel, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listModels = `-- name: ListModels :many
SELECT id, name
FROM models
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListModelsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type ListModelsRow struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

func (q *Queries) ListModels(ctx context.Context, arg ListModelsParams) ([]ListModelsRow, error) {
	rows, err := q.db.Query(ctx, listModels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListModelsRow
	for rows.Next() {
		var i ListModelsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
